{"version":3,"sources":["App.module.css","components/City-selector.tsx","api/weather-api.ts","constants/city-constants.ts","utils/Icons.ts","components/WeatherCards/TopCard.tsx","components/WeatherCards/MiddleCard.tsx","components/Weather-forecast.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CitySelector","cities","initialCityId","onCityChange","useStyles","makeStyles","theme","createStyles","formControl","minWidth","selectEmpty","marginTop","spacing","React","useState","currentCityId","setCurrentCityId","cityItems","map","city","MenuItem","value","id","name","classes","FormControl","className","InputLabel","Select","labelId","onChange","event","target","selectedCity","find","x","baseUrl","apiKey","getCurrentWeatherForCity","units","fetch","then","response","json","getHourlyWeatherForCity","Map","data","forecastData","list","filter","listdata","dt_txt","match","utc","require","dayjs","extend","products","weatherIcons","prefix","root","maxWidth","container","display","flexWrap","card","width","height","backgroundColor","wi","color","atmospheric","fontSize","padding","recommendation","fontFamily","textAlign","TopCard","currentWeather","str","currentTime","dt","utcOffset","timezone","format","sunrise","sys","sunset","console","log","timeOfDay","weather","icon","getIcons","Card","CardContent","Typography","gutterBottom","variant","component","CardMedia","src","style","float","paddingTop","main","temp","feels_like","wind","speed","humidity","cardslide","MiddleCard","currentWeatherData","hourlyData","time","dayname","currentHour","currentDate","Number","getCardData","temp_min","temp_max","TabPanel","props","children","index","other","role","hidden","aria-labelledby","Box","p","mainCard","tabsWidth","paper","a11yProps","WeatherForecast","setCity","setCurrentWeather","hourlyWeather","setHourlyWeather","useEffect","a","Promise","all","results","current","hourly","loadWeather","setValue","length","Grid","direction","alignItems","xs","item","toString","Tabs","centered","newValue","aria-label","Tab","label","CircularProgress","App","styles","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6f2d696.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from \"react\";\nimport {\n  Select,\n  InputLabel,\n  MenuItem,\n  makeStyles,\n  createStyles,\n  Theme,\n  FormControl,\n} from \"@material-ui/core\";\nimport { City } from \"../models/city\";\n\nconst CitySelector: React.FunctionComponent<{\n  cities: City[];\n  initialCityId: string;\n  onCityChange: (city: City) => void;\n}> = ({ cities, initialCityId, onCityChange }) => {\n  \n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      formControl: {\n        minWidth: 200,\n      },\n      selectEmpty: {\n        marginTop: theme.spacing(2),\n      },\n    })\n  );\n\n  const [currentCityId, setCurrentCityId] = React.useState(initialCityId);\n  const cityItems = cities.map((city: City) => (\n    <MenuItem key={city.id} value={city.id}>\n      {city.name}\n    </MenuItem>\n  ));\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setCurrentCityId(event.target.value as string);\n    const selectedCity: City = cities.find(\n      (x) => x.id === event.target.value \n    );\n    onCityChange(selectedCity);\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">Select City</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={currentCityId}\n          onChange={handleChange}\n        >\n          {cityItems}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CitySelector;\n","import { City } from \"../models/city\";\nimport { CurrentWeatherData } from \"../models/current-weather\";\nimport { HourlyWeatherData } from \"../models/hourly-weather\";\nimport  {currentDaysAndTime} from \"../utils/Icons\"\nconst baseUrl = \"https://api.openweathermap.org/data/2.5/\";\nconst apiKey = \"7397670e46c9351913257d1843a6d5cd\";\n\nexport const getCurrentWeatherForCity = (\n  city: City,\n  units = \"imperial\"\n): Promise<CurrentWeatherData> => {\n  return fetch(\n    `${baseUrl}weather?id=${city.id}&units=${units}&appid=${apiKey}`\n  ).then((response: Response) => response.json());\n};\n\nexport const getHourlyWeatherForCity = (\n  city: City,\n  units = \"imperial\"\n): Promise<HourlyWeatherData> => {\n  let dayMap = new Map();\n  return fetch(\n    `${baseUrl}forecast?id=${city.id}&units=${units}&appid=${apiKey}`\n  ).then((response: Response) => response.json()).then((data:HourlyWeatherData)=>{\n    /*data.list.forEach((data)=>{\n     currentDaysAndTime(data,dayMap);\n    });*/\n    data.forecastData =data.list.filter(listdata =>listdata.dt_txt.match(/09:00:00/))\n    //data.dayMap = dayMap;\n    return data;\n  });\n};\n","import { City } from \"../models/city\";\n\nexport const cities: City[] = [\n  { name: \"Boston\", id: 4930956 },\n  { name: \"London\", id: 2643743 },\n  { name: \"Tokyo\", id: 1850147 },\n  { name: \"New York\", id: 5128638 },\n  { name: \"San Francisco\", id: 5391959 },\n  { name: \"Barcelona\", id: 1726701 },\n  { name: \"Paris\", id: 2968815 },\n  { name: \"Madrid\", id: 3117735 },\n  { name: \"Chicago\", id: 4887398 },\n  { name: \"Moscow\", id: 524894 }\n];\n","import * as weatherIcons from \"../weatherIcons/icons.json\";\n//import dayjs from \"dayjs\";\nimport { CurrentWeatherData } from \"../models/current-weather\";\nimport dayjs from 'dayjs';\nimport { HourlyWeatherData, List } from \"../models/hourly-weather\";\nconst utc = require(\"dayjs/plugin/utc\");\ndayjs.extend(utc);\nconst products:any = (weatherIcons as any).default;\nconst prefix:string = \"wi wi-\";\n\n\nexport const getIcons=(currentWeather:CurrentWeatherData):string=>{\n  \n \n  //const currentTime =(dayjs as any).utc().;\n  const currentTime = (dayjs as any)\n  .utc(currentWeather.dt)\n  .utcOffset(currentWeather.timezone)\n  .format();\n  const sunrise = (dayjs as any)\n    .utc(currentWeather.sys.sunrise)\n    .utcOffset(currentWeather.timezone)\n    .format();\n  const sunset = (dayjs as any)\n    .utc(currentWeather.sys.sunset)\n    .utcOffset(currentWeather.timezone)\n    .format();\n  console.log(\"sunsrise\"+sunrise);\n  console.log(\"sunsrise\"+sunset);\n  const timeOfDay =\n  currentTime > sunrise && currentTime < sunset ? \"day\" : \"night\";\n  console.log(\"time of the day is\"+timeOfDay);\n  const icon:string = prefix + products[timeOfDay][currentWeather.weather[0].id].icon;\n   return icon\n\n}\nexport const getCardData = (currentWeatherData:CurrentWeatherData, hourlyData:List)=>{\n   const time = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"h A\");\n   const dayname:string = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"dddd\");\n   const currentHour = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"H\");\n   const currentDate = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"DD/MM/YYYY\");\n   const timeOfDay = Number(currentHour) > 7 && Number(currentHour) < 19 ? \"day\" : \"night\";\n   const icon = prefix + products[timeOfDay][hourlyData.weather[0].id].icon;\n   return {dayname,icon,time,currentDate};\n}\nexport const currentDaysAndTime =(hourlyData:List,dayMap:Map<any,any>)=>{\n  const dayname:string= dayjs(hourlyData.dt_txt).format(\"dddd\")\n  if(dayMap.has(dayname)){\n    let val = dayMap.get(dayname);\n    val.push(hourlyData);\n  }else{\n   let val = [];\n   val.push(hourlyData);\n   dayMap.set(dayname,val);\n  }\n}\n\n\n\n","import { Card,CardContent,CardMedia,Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {getIcons} from '../../utils/Icons';\nimport { CurrentWeatherData } from \"../../models/current-weather\";\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 345\n    },\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    card:{\n      width: 770,\n      height: 300,\n      backgroundColor: '#0f6fc047'\n    },\n    wi: {\n      color: \"#673ab7\"\n    },\n    atmospheric: {\n      fontSize: \"28px\",\n      padding: \"5px\"\n    },\n    recommendation: {\n      fontFamily: \"Montserrat, sans-serif\",\n      padding: \"20px 0px 10px 0px\",\n      fontSize: \"26px\",\n      textAlign: \"center\"\n    },\n  });\nexport const TopCard:React.FunctionComponent<{currentWeather:CurrentWeatherData}> =({currentWeather})=>{\n    const classes = useStyles();\n    const humidity = \"wi wi-humidity\";\n    const strongWind = \"wi wi-strong-wind\";\n    let str = getIcons(currentWeather);\n    console.log(\"this is current weather\"+str);\n    return(\n<Card className= {classes.card}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          Today's Weather\n        </Typography>\n        <CardMedia \n         className={str}\n         src={str}\n         style={{ fontSize: \"128px\", float: \"right\" }}\n        />\n        <Typography\n          variant=\"h2\"\n          className=\"big-temp\"\n          color=\"textPrimary\"\n          component=\"h2\"\n          style={{ fontFamily: \"Montserrat\", paddingTop: \"30px\" }}\n        >\n          {currentWeather.main.temp}&#8457;\n        </Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\" gutterBottom>\n          Feels like {currentWeather.main.feels_like}&deg;F\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          className=\"atmospheric-conditions\"\n          color=\"textSecondary\"\n          gutterBottom\n          style={{ paddingTop: \"40px\" }}\n        >\n          <span\n            className={`${strongWind} ${classes.atmospheric}`}\n          ></span>\n          {currentWeather.wind.speed} km/h Winds{\" \"}\n          <span\n            className={`${humidity} ${classes.atmospheric}`}\n          ></span>\n         {currentWeather.main.humidity}% Humidity\n        </Typography>\n      </CardContent>\n      </Card>\n    )\n   \n}\n\n","import { Card,CardContent,CardMedia,Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CurrentWeatherData } from \"../../models/current-weather\";\nimport { HourlyWeatherData, List } from \"../../models/hourly-weather\";\nimport {getCardData} from \"../../utils/Icons\"\nconst useStyles = makeStyles({\n    root: {\n      maxWidth: 345\n    },\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\"\n    },\n    cardslide:{\n        height: 160,\n        width: 110,\n        backgroundColor: '#0f6fc047'\n    },\n    wi: {\n      color: \"#673ab7\"\n    },\n    atmospheric: {\n      fontSize: \"28px\",\n      padding: \"5px\"\n    },\n    recommendation: {\n      fontFamily: \"Montserrat, sans-serif\",\n      padding: \"20px 0px 10px 0px\",\n      fontSize: \"26px\",\n      textAlign: \"center\"\n    },\n  });\nexport const MiddleCard:React.FunctionComponent<{currentWeatherData:CurrentWeatherData,hourlyData:List}> =({currentWeatherData,hourlyData})=>{\n    const classes = useStyles();\n    const humidity = \"wi wi-humidity\";\n    const strongWind = \"wi wi-strong-wind\";\n    let {dayname,icon,time,currentDate} = getCardData(currentWeatherData,hourlyData);\n    console.log(dayname)\n    return(\n        <Card className= {classes.cardslide}>\n            <CardContent>\n            <Typography \n            className=\"week-day\"\n            >\n              {dayname}\n            </Typography>\n            <Typography \n            className=\"week-day\"\n            >\n              {currentDate}\n            </Typography>\n             <span\n            className={`${icon} ${classes.atmospheric}`}\n             ></span>\n             <Typography variant=\"body2\" component=\"span\" color=\"textPrimary\">\n            {hourlyData.main.temp_min}&deg;\n          </Typography>\n          <Typography variant=\"body2\" component=\"span\" color=\"textSecondary\">\n            {hourlyData.main.temp_max}&deg;\n          </Typography>\n          <Typography \n            className=\"week-day\"\n            >\n              {time}\n            </Typography>\n            </CardContent>\n        </Card>\n    )\n}","import React from \"react\";\nimport { AppBar ,Card,CardContent,CardMedia,Paper, Divider,Grid,Tabs,Tab,Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { City } from \"../models/city\";\nimport CitySelector from \"./City-selector\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  getCurrentWeatherForCity,\n  getHourlyWeatherForCity,\n} from \"../api/weather-api\";\nimport { CurrentWeatherData } from \"../models/current-weather\";\nimport { cities } from \"../constants/city-constants\";\nimport { HourlyWeatherData } from \"../models/hourly-weather\";\nimport{TopCard} from \"./WeatherCards/TopCard\";\nimport{MiddleCard} from \"./WeatherCards/MiddleCard\";\nimport{BottomCard} from \"./WeatherCards/BottomCard\";\nimport Box from '@material-ui/core/Box';\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  card:{\n    width: 840,\n    height: 180\n  },\n  mainCard:{\n   minWidth:600,\n  },\n  tabsWidth:{\n   width:800,\n  },\n  wi: {\n    color: \"#673ab7\"\n  },\n  atmospheric: {\n    fontSize: \"28px\",\n    padding: \"5px\"\n  },\n  recommendation: {\n    fontFamily: \"Montserrat, sans-serif\",\n    padding: \"20px 0px 10px 0px\",\n    fontSize: \"26px\",\n    textAlign: \"center\"\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n});\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\nconst WeatherForecast: React.FunctionComponent = () => {\n  const classes = useStyles();\n  const [city, setCity] = React.useState<City>(cities[0]);\n  const [\n    currentWeather,\n    setCurrentWeather,\n  ] = React.useState<CurrentWeatherData>(null);\n\n  const [hourlyWeather, setHourlyWeather] = React.useState<HourlyWeatherData>(\n    null\n  );\n\n  const onCityChange = (city: City) => {\n    setCity(city);\n  };\n\n  React.useEffect(() => {\n    const loadWeather = async () => {\n      await Promise.all([\n        getCurrentWeatherForCity(city),\n        getHourlyWeatherForCity(city),\n      ]).then((results: [CurrentWeatherData, HourlyWeatherData]) => {\n        const [current, hourly] = results;\n        setCurrentWeather(current);\n        setHourlyWeather(hourly);\n      });\n    };\n\n    if (city) {\n      loadWeather();\n    }\n  }, [city]);\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  console.log(\"this is the data\" + currentWeather);\n  \n  if(currentWeather && hourlyWeather && currentWeather.id==city.id && hourlyWeather.city.id == city.id){  \n    console.log(\"this is the Length\" + hourlyWeather.list.length);\n  return (\n    <div>\n      <Grid container \n       direction=\"column\" \n       spacing={4}\n       alignItems=\"center\"\n       xs={12}\n      >\n      <Grid item xs={12} >\n        <Typography variant=\"h5\" gutterBottom>\n          {(city && `Displaying Weather Information for ${city.name}`) ||\n            `Select a City to View Weather Information`}\n        </Typography>\n        <CitySelector\n          cities={cities}\n          initialCityId={city.id.toString()}\n          onCityChange={onCityChange}\n        />\n        </Grid>\n      <Grid xs={12} item>\n      <Tabs centered value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n            <Tab label=\"Next 48 Hours\" {...a11yProps(0)} />\n            <Tab label=\"Next 5 days\" {...a11yProps(1)} />\n        </Tabs>\n      </Grid>\n       <Grid xs={12} item>\n        <TopCard currentWeather={currentWeather} />\n      </Grid>\n      <TabPanel value={value} index={0}>\n      <Grid xs={12} item>\n      <Grid container spacing={3}>\n          {[0, 1, 2,3,4,5].map((value) => (\n            <Grid key={value} item>\n              <MiddleCard currentWeatherData={currentWeather} hourlyData={hourlyWeather.list[value]} />\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      <Grid xs={12} item>\n      <Grid container spacing={3}>\n           {[6, 7, 8,9,10,11].map((value) => (\n            <Grid key={value} item>\n              <MiddleCard currentWeatherData={currentWeather} hourlyData={hourlyWeather.list[value]} />\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n      <Grid xs={12} item>\n      <Grid container spacing={5}>\n           {[0, 1, 2,3,4].map((value) => (\n            <Grid key={value} item>\n              <MiddleCard currentWeatherData={currentWeather} hourlyData={hourlyWeather.forecastData[value]} />\n            </Grid>\n          ))}\n        </Grid>\n      </Grid>\n      </TabPanel>\n      </Grid>\n    </div>\n  )}else {\n    return (\n      <div>\n        <CircularProgress color=\"primary\" />\n      </div>\n    );\n  }\n};\n\nexport default WeatherForecast;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport WeatherForecast from \"./components/Weather-forecast\";\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <div className={styles.App}>\n      <WeatherForecast />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
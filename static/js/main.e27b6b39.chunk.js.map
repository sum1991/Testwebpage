{"version":3,"sources":["App.module.css","components/City-selector.tsx","api/weather-api.ts","constants/city-constants.ts","utils/cardData.ts","components/WeatherCards/TodayCard.tsx","components/LayoutComponents/TabPanel.tsx","components/WeatherCards/ForeCastCard.tsx","components/LayoutComponents/GridComponents.tsx","components/Weather-forecast.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CitySelector","cities","initialCityId","onCityChange","useStyles","makeStyles","theme","createStyles","formControl","minWidth","selectEmpty","marginTop","spacing","React","useState","currentCityId","setCurrentCityId","cityItems","map","city","MenuItem","value","id","name","classes","FormControl","className","InputLabel","Select","labelId","onChange","event","target","selectedCity","find","x","baseUrl","apiKey","getCurrentWeatherForCity","units","fetch","then","response","json","getHourlyWeatherForCity","data","forecastData","list","filter","listdata","dt_txt","match","utc","require","dayjs","extend","products","weatherIcons","prefix","root","maxWidth","card","width","height","backgroundColor","atmospheric","fontSize","padding","TodayCard","currentWeather","str","currentTime","dt","utcOffset","timezone","format","sunrise","sys","sunset","weather","icon","getTopCard","Card","CardContent","Typography","gutterBottom","variant","component","CardMedia","src","style","float","color","fontFamily","paddingTop","main","temp","feels_like","wind","speed","humidity","TabPanel","props","children","index","other","role","hidden","aria-labelledby","Box","p","cardslide","ForeCastCard","currentWeatherData","hourlyData","time","dayname","currentHour","currentDate","timeOfDay","Number","getForeCastData","temp_min","temp_max","SmallCardComponent","values","tabPanelIndex","result","Grid","item","xs","container","slice","length","a11yProps","WeatherForecast","setCity","setCurrentWeather","hourlyWeather","setHourlyWeather","useEffect","a","Promise","all","results","current","hourly","loadWeather","setValue","direction","alignItems","toString","Tabs","centered","newValue","aria-label","Tab","label","CircularProgress","App","styles","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e27b6b39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from \"react\";\nimport {\n  Select,\n  InputLabel,\n  MenuItem,\n  makeStyles,\n  createStyles,\n  Theme,\n  FormControl,\n} from \"@material-ui/core\";\nimport { City } from \"../models/city\";\n\nconst CitySelector: React.FunctionComponent<{\n  cities: City[];\n  initialCityId: string;\n  onCityChange: (city: City) => void;\n}> = ({ cities, initialCityId, onCityChange }) => {\n  \n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      formControl: {\n        minWidth: 200,\n      },\n      selectEmpty: {\n        marginTop: theme.spacing(2),\n      },\n    })\n  );\n\n  const [currentCityId, setCurrentCityId] = React.useState(initialCityId);\n  const cityItems = cities.map((city: City) => (\n    <MenuItem key={city.id} value={city.id}>\n      {city.name}\n    </MenuItem>\n  ));\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setCurrentCityId(event.target.value as string);\n    const selectedCity: City = cities.find(\n      (x) => x.id === event.target.value \n    );\n    onCityChange(selectedCity);\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">Select City</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={currentCityId}\n          onChange={handleChange}\n        >\n          {cityItems}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CitySelector;\n","import { City } from \"../models/city\";\nimport { CurrentWeatherData } from \"../models/current-weather\";\nimport { HourlyWeatherData } from \"../models/hourly-weather\";\nconst baseUrl = \"https://api.openweathermap.org/data/2.5/\";\nconst apiKey = \"7397670e46c9351913257d1843a6d5cd\";\n\nexport const getCurrentWeatherForCity = (\n  city: City,\n  units = \"imperial\"\n): Promise<CurrentWeatherData> => {\n  return fetch(\n    `${baseUrl}weather?id=${city.id}&units=${units}&appid=${apiKey}`\n  ).then((response: Response) => response.json());\n};\n\nexport const getHourlyWeatherForCity = (\n  city: City,\n  units = \"imperial\"\n): Promise<HourlyWeatherData> => {\n  return fetch(\n    `${baseUrl}forecast?id=${city.id}&units=${units}&appid=${apiKey}`\n  ).then((response: Response) => response.json()).then((data:HourlyWeatherData)=>{\n    data.forecastData =data.list.filter(listdata =>listdata.dt_txt.match(/09:00:00/))\n    return data;\n  });\n};\n","import { City } from \"../models/city\";\n\nexport const cities: City[] = [\n  { name: \"Boston\", id: 4930956 },\n  { name: \"London\", id: 2643743 },\n  { name: \"Tokyo\", id: 1850147 },\n  { name: \"New York\", id: 5128638 },\n  { name: \"San Francisco\", id: 5391959 },\n  { name: \"Barcelona (Philippines)\", id: 1726701 },\n  { name: \"Paris\", id: 2968815 },\n  { name: \"Madrid\", id: 3117735 },\n  { name: \"Chicago\", id: 4887398 },\n  { name: \"Moscow\", id: 524894 }\n];\n","import * as weatherIcons from \"../weatherIcons/icons.json\";\n//import dayjs from \"dayjs\";\nimport { CurrentWeatherData } from \"../models/current-weather\";\nimport dayjs from 'dayjs';\nimport {List } from \"../models/hourly-weather\";\nconst utc = require(\"dayjs/plugin/utc\");\ndayjs.extend(utc);\nconst products:any = (weatherIcons as any).default;\nconst prefix:string = \"wi wi-\";\n\n\nexport const getTopCard=(currentWeather:CurrentWeatherData):string=>{\n  const currentTime = (dayjs as any)\n  .utc(currentWeather.dt)\n  .utcOffset(currentWeather.timezone)\n  .format();\n  const sunrise = (dayjs as any)\n    .utc(currentWeather.sys.sunrise)\n    .utcOffset(currentWeather.timezone)\n    .format();\n  const sunset = (dayjs as any)\n    .utc(currentWeather.sys.sunset)\n    .utcOffset(currentWeather.timezone)\n    .format();\n  const timeOfDay =\n  currentTime > sunrise && currentTime < sunset ? \"day\" : \"night\";\n  const icon:string = prefix + products[timeOfDay][currentWeather.weather[0].id].icon;\n  return icon\n\n}\nexport const getForeCastData = (currentWeatherData:CurrentWeatherData, hourlyData:List)=>{\n   const time = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"h A\");\n   const dayname:string = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"dddd\");\n   const currentHour = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"H\");\n   const currentDate = (dayjs as any)(hourlyData.dt*1000).utcOffset(currentWeatherData.timezone/3600).format(\"DD/MM/YYYY\");\n   const timeOfDay = Number(currentHour) > 7 && Number(currentHour) < 19 ? \"day\" : \"night\";\n   const icon = prefix + products[timeOfDay][hourlyData.weather[0].id].icon;\n   return {dayname,icon,time,currentDate};\n}\n\n\n\n","import { Card, CardContent, CardMedia, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { getTopCard } from '../../utils/cardData';\nimport { CurrentWeatherData } from \"../../models/current-weather\";\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345\n  },\n  card: {\n    width: 770,\n    height: 300,\n    backgroundColor: '#0f6fc047'\n  },\n  atmospheric: {\n    fontSize: \"28px\",\n    padding: \"5px\"\n  },\n});\nexport const TodayCard: React.FunctionComponent<{ currentWeather: CurrentWeatherData }> = ({ currentWeather }) => {\n  const classes = useStyles();\n  const humidity = \"wi wi-humidity\";\n  const strongWind = \"wi wi-strong-wind\";\n  let str = getTopCard(currentWeather);\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          Today's Weather\n        </Typography>\n        <CardMedia\n          className={str}\n          src={str}\n          style={{ fontSize: \"128px\", float: \"right\" }}\n        />\n        <Typography\n          variant=\"h2\"\n          className=\"big-temp\"\n          color=\"textPrimary\"\n          component=\"h2\"\n          style={{ fontFamily: \"Montserrat\", paddingTop: \"30px\" }}\n        >\n          {currentWeather.main.temp}&#8457;\n        </Typography>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\" gutterBottom>\n          Feels like {currentWeather.main.feels_like}&deg;F\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          className=\"atmospheric-conditions\"\n          color=\"textSecondary\"\n          gutterBottom\n          style={{ paddingTop: \"40px\" }}\n        >\n          <span\n            className={`${strongWind} ${classes.atmospheric}`}\n          ></span>\n          {currentWeather.wind.speed} km/h Winds{\" \"}\n          <span\n            className={`${humidity} ${classes.atmospheric}`}\n          ></span>\n          {currentWeather.main.humidity}% Humidity\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n\n}\n\n","import Box from '@material-ui/core/Box';\nimport { Typography } from \"@material-ui/core\";\nexport const TabPanel = (props) =>{\n    const { children, value, index, ...other } = props;\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }","import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CurrentWeatherData } from \"../../models/current-weather\";\nimport { List } from \"../../models/hourly-weather\";\nimport { getForeCastData } from \"../../utils/cardData\"\nconst useStyles = makeStyles({\n  cardslide: {\n    height: 160,\n    width: 110,\n    backgroundColor: '#0f6fc047'\n  },\n  atmospheric: {\n    fontSize: \"28px\",\n    padding: \"5px\"\n  }\n});\nexport const ForeCastCard: React.FunctionComponent<{currentWeatherData: CurrentWeatherData,hourlyData: List }> = ({ currentWeatherData, hourlyData }) => {\n  const classes = useStyles();\n  let { dayname, icon, time, currentDate } = getForeCastData(currentWeatherData, hourlyData);\n  return (\n    <Card className={classes.cardslide}>\n    <CardContent>\n      <Typography\n        className=\"week-day\"\n      >\n        {dayname}\n      </Typography>\n      <Typography\n        className=\"week-day\"\n      >\n        {currentDate}\n      </Typography>\n      <span\n        className={`${icon} ${classes.atmospheric}`}\n      ></span>\n      <Typography variant=\"body2\" component=\"span\" color=\"textPrimary\">\n        {hourlyData.main.temp_min}&deg;\n        </Typography>\n      <span>\n        {\"/\"}\n      </span>\n      <Typography variant=\"body2\" component=\"span\" color=\"textSecondary\">\n        {hourlyData.main.temp_max}&deg;\n        </Typography>\n      <Typography\n        className=\"week-day\"\n      >\n        {time}\n      </Typography>\n    </CardContent>\n  </Card> \n  )\n  }\n","import { Grid } from \"@material-ui/core\";\nimport { List } from \"../../models/hourly-weather\";\nimport { TodayCard } from \"../WeatherCards/TodayCard\";\nimport { ForeCastCard } from \"../WeatherCards/ForeCastCard\";\nexport const TodayGridItemComponent = (props) => {\n    const { value } = props;\n    return (\n        <Grid xs={12} item>\n            <TodayCard currentWeather={value} />\n        </Grid>\n    );\n}\n\nexport const SmallCardComponent = ({currentWeather,values,tabPanelIndex }) => {\n    const result = (values as Array<List>).map((value, index) => {\n        return (\n            <Grid key={index} item>\n                <ForeCastCard currentWeatherData={currentWeather} hourlyData={value} />\n            </Grid>\n        )\n    });\n    if (tabPanelIndex === 1) {\n        return (\n            <div>\n                <Grid xs={12} item>\n                    <Grid container spacing={3}>\n                        {result}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <Grid xs={12} item>\n                    <Grid container spacing={3}>\n                        {result.slice(0, 6)}\n                    </Grid>\n                </Grid>\n                <Grid xs={12} item>\n                    <Grid container spacing={3}>\n                        {result.slice(6, result.length)}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n\n\n}","import React from \"react\";\nimport { Grid, Tabs, Tab, Typography } from \"@material-ui/core\";\nimport { City } from \"../models/city\";\nimport CitySelector from \"./City-selector\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  getCurrentWeatherForCity,\n  getHourlyWeatherForCity,\n} from \"../api/weather-api\";\nimport { CurrentWeatherData } from \"../models/current-weather\";\nimport { cities } from \"../constants/city-constants\";\nimport { HourlyWeatherData } from \"../models/hourly-weather\";\nimport { TodayCard } from \"./WeatherCards/TodayCard\";\nimport {TabPanel} from \"./LayoutComponents/TabPanel\"\nimport { SmallCardComponent } from \"./LayoutComponents/GridComponents\";\n\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\nconst WeatherForecast: React.FunctionComponent = () => {\n  const [city, setCity] = React.useState<City>(cities[0]);\n  const [\n    currentWeather,\n    setCurrentWeather,\n  ] = React.useState<CurrentWeatherData>(null);\n\n  const [hourlyWeather, setHourlyWeather] = React.useState<HourlyWeatherData>(\n    null\n  );\n\n  const onCityChange = (city: City) => {\n    setCity(city);\n  };\n\n  React.useEffect(() => {\n    const loadWeather = async () => {\n      await Promise.all([\n        getCurrentWeatherForCity(city),\n        getHourlyWeatherForCity(city),\n      ]).then((results: [CurrentWeatherData, HourlyWeatherData]) => {\n        const [current, hourly] = results;\n        setCurrentWeather(current);\n        setHourlyWeather(hourly);\n      });\n    };\n\n    if (city) {\n      loadWeather();\n    }\n  }, [city]);\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  if (currentWeather && hourlyWeather &&\n    currentWeather.id === city.id &&\n    hourlyWeather.city.id === city.id) {\n    return (\n      <div>\n        <Grid container\n          direction=\"column\"\n          spacing={4}\n          alignItems=\"center\"\n          xs={12}\n        >\n          <Grid item xs={12} >\n            <Typography variant=\"h5\" gutterBottom>\n              {(city && `Displaying Weather Information for ${city.name}`) ||\n                `Select a City to View Weather Information`}\n            </Typography>\n            <CitySelector\n              cities={cities}\n              initialCityId={city.id.toString()}\n              onCityChange={onCityChange}\n            />\n          </Grid>\n          <Grid xs={12} item>\n            <Tabs centered value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n              <Tab label=\"Next 36 Hours\" {...a11yProps(0)} />\n              <Tab label=\"Next 5 days\" {...a11yProps(1)} />\n            </Tabs>\n          </Grid>\n          <Grid xs={12} item>\n            <TodayCard currentWeather={currentWeather} />\n          </Grid>\n          <TabPanel value={value} index={0}>\n            <SmallCardComponent currentWeather={currentWeather} values={hourlyWeather.list.slice(0,12)} tabPanelIndex={0} />\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <SmallCardComponent currentWeather={currentWeather} values={hourlyWeather.forecastData} tabPanelIndex={1} />\n          </TabPanel>\n        </Grid>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <CircularProgress color=\"primary\" />\n      </div>\n    );\n  }\n};\n\nexport default WeatherForecast;\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport WeatherForecast from \"./components/Weather-forecast\";\nimport {Typography } from \"@material-ui/core\";\nconst App: React.FunctionComponent = () => {\n  return (\n    <div className={styles.App}>\n       <Typography variant=\"h6\">\n         <span>React Weather App</span>\n      </Typography>\n      <WeatherForecast />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}